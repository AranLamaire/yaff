# YAFF is yet another force-field code
# Copyright (C) 2008 - 2011 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of YAFF.
#
# YAFF is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# YAFF is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --


import numpy as np

from molmod import angstrom

from yaff import *


__all__ = ['get_system_h2o32']


def get_system_h2o32():
    return System(
        numbers=np.array([8, 1, 1]*32),
        pos=np.array([ # Coordinates ripped from the CP2K test suite.
            [-4.583, 5.333, 1.560], [-3.777, 5.331, 0.943], [-5.081, 4.589,
            1.176], [-0.083, 4.218, 0.070], [-0.431, 3.397, 0.609], [0.377,
            3.756, -0.688], [-1.488, 2.692, 4.125], [-2.465, 2.433, 3.916],
            [-1.268, 2.145, 4.952], [-2.461, -2.548, -6.136], [-1.892, -2.241,
            -6.921], [-1.970, -3.321, -5.773], [4.032, 0.161, 2.183], [4.272,
            -0.052, 1.232], [4.044, -0.760, 2.641], [2.950, -3.497, -1.006],
            [2.599, -3.901, -0.129], [3.193, -4.283, -1.533], [-2.890, -4.797,
            -2.735], [-2.810, -5.706, -2.297], [-2.437, -4.128, -2.039],
            [-0.553, 0.922, -3.731], [-0.163, 1.552, -3.085], [-1.376, 0.544,
            -3.469], [4.179, 4.017, 4.278], [3.275, 3.832, 3.876], [4.658,
            4.492, 3.572], [5.739, 1.425, 3.944], [5.125, 2.066, 4.346], [5.173,
            1.181, 3.097], [0.988, -0.760, -5.445], [1.640, -1.372, -4.989],
            [0.546, -0.220, -4.762], [-0.748, 1.985, 1.249], [-0.001, 1.490,
            1.540], [-1.160, 2.255, 2.109], [4.127, -0.234, -3.149], [5.022,
            -0.436, -3.428], [3.540, -0.918, -3.601], [-2.473, 2.768, -1.395],
            [-1.533, 2.719, -1.214], [-2.702, 1.808, -1.479], [-0.124, -2.116,
            2.404], [0.612, -2.593, 2.010], [0.265, -1.498, 3.089], [0.728,
            2.823, -2.190], [0.646, 3.694, -2.685], [1.688, 2.705, -1.947],
            [4.256, -5.427, -2.644], [5.222, -5.046, -2.479], [4.174, -5.628,
            -3.593], [-3.178, -0.508, -4.227], [-2.762, -1.221, -4.818],
            [-3.603, 0.073, -4.956], [-1.449, 5.300, -4.805], [-1.397, 4.470,
            -5.317], [-2.102, 5.091, -4.067], [3.354, 2.192, -1.755], [3.407,
            1.433, -2.405], [3.971, 2.958, -2.196], [1.773, -4.018, 1.769],
            [1.121, -4.532, 1.201], [1.975, -4.529, 2.618], [1.526, 1.384,
            2.712], [2.317, 1.070, 2.251], [1.353, 0.657, 3.364], [2.711,
            -2.398, -4.253], [2.202, -3.257, -4.120], [3.305, -2.610, -5.099],
            [6.933, 0.093, -1.393], [6.160, -0.137, -0.795], [6.748, -0.394,
            -2.229], [-5.605, -2.549, 3.151], [-4.756, -2.503, 3.616], [-5.473,
            -3.187, 2.378], [0.821, -4.406, 6.516], [0.847, -3.675, 7.225],
            [-0.014, -4.240, 5.988], [1.577, 3.933, 3.762], [1.221, 2.975,
            3.640], [1.367, 4.126, 4.659], [-2.111, -3.741, -0.219], [-1.378,
            -4.425, -0.036], [-1.825, -2.775, 0.003], [0.926, -1.961, -2.063],
            [0.149, -1.821, -1.402], [1.725, -2.303, -1.536], [4.531, -1.030,
            -0.547], [4.290, -1.980, -0.581], [4.292, -0.597, -1.390], [-0.740,
            -1.262, -0.029], [-1.272, -0.422, -0.099], [-0.403, -1.349, 0.873],
            [3.655, 3.021, 0.988], [2.706, 3.053, 1.282], [3.542, 2.615, 0.020]
        ])*angstrom,
        ffatypes=['O', 'H', 'H']*32,
        bonds=np.array([[i,i+1] for i in xrange(96) if i%3!=2]),
        rvecs=np.array([[9.865, 0.0, 0.0], [0.0, 9.865, 0.0], [0.0, 0.0, 9.865]])*angstrom,
    )
